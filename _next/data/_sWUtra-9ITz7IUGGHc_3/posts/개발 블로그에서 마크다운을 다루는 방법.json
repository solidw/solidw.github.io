{"pageProps":{"attributes":{"title":"개발 블로그에서 마크다운을 다루는 방법","description":"개발 블로그에 기본이라고 할 수 있는 Markdown 파서와 Syntax highlight 삽질을 들여다보자","draft":false,"date":"2022-06-19","to":"블로그를 Next.js로 한땀 한땀 만들고 싶은 사람"},"body":"# 마크다운?\n\n> 마크다운은 일반 텍스트 기반의 경량 마크업 언어다. 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다. [위키백과](https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4)\n\n````markdown\n# 이처럼 #이 하나 붙으면 h1 태그로 렌더함\n\n- list도 만들 수 있고\n\n`Code도 표현할 수 있다.`\n\n```ts\nconst HelloBlog = () => \"Hello Blog\";\n```\n````\n\n# 이처럼 #이 하나 붙으면 h1 태그로 렌더함\n\n- list도 만들 수 있고\n\n`Code도 표현할 수 있다.`\n\n```ts\nconst HelloBlog = () => \"Hello Blog\";\n```\n\n---\n\n블로그 글을 쓸 때 매번 `<h1>제목</h1>` `<code>const a = 1</code>` 이렇게 작성한다면 나는 글도 써야하고 마크업도 신경써야 할 것이다.\n이 때 마크다운 형식으로 포스팅을 작성한다면\n\n1. 앞서 말한 것처럼 글감에만 집중할 수 있다.\n2. 마크다운 형식을 사용하는 다른 곳에 사용하기 용이하다.(대표적으로 GitHub Issue, Pull Request 등)\n3. 몇가지 스타일을 커스텀해두면 그 다음에는 디자인을 신경 쓰지 않아도 글을 작성하는 것이 수월하다.\n\n본론으로 돌아와서, 나의 블로그 제작 계획은 이러했다.\n`/posts/`에 `포스팅.md` 형식으로 작성하고, 웹페이지를 렌더할 때(정확히는 빌드타임) 해당 파일을 읽어서 html로 변환하여 보여주는 것이다. 즉 내가 포스팅을 작성하기 위해서는 마크다운 파일을 `/posts/` 아래에 작성만 하면 되는 것이다.\n\n우선 렌더하는 곳 `/posts/[postid]` 에서 `getStaticPaths`/`getStaticProp`를 통해 마크다운 파일을 읽도록 했다. 이 함수들은 빌드타임에 실행되고, 빌드 후에는 다시 실행되지 않는 함수이다. (즉 유저가 접속할 때 마다 실행되는 것이 아니고 빌드 시에 호출한 getStaticXXX()의 결과물을 보여줄 것이다.) [next 도큐먼트](https://nextjs.org/docs/basic-features/data-fetching/get-static-paths)\n\n```ts\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const dir = path.join(process.cwd(), \"posts\");\n  const fileNames = fs.readdirSync(dir);\n\n  const paths = fileNames.map((fileName) => ({\n    params: { fileName: postUtils.getFileNameBase(fileName) },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  if (params?.fileName == null) {\n    throw new Error(\"fileName을 찾을 수 없습니다.\");\n  }\n\n  const dir = path.join(process.cwd(), \"posts\");\n  const fileName = `${dir}/${params.fileName}.md`;\n\n  const content = fs.readFileSync(fileName, \"utf8\");\n  const { attributes, body } = postUtils.parseFrontMatter(content);\n\n  const safeAttributes = postUtils.safeParseAttributes(attributes, {\n    date: dateUtils.formatDate(fs.statSync(fileName).birthtime),\n  });\n\n  return {\n    props: {\n      attributes: safeAttributes,\n      body,\n    },\n  };\n};\n```\n\n이 때 포스트의 메타데이터를 주입해주기 위해 `frontMatterParser` 를 사용했는데, 파일 맨 위에 선엄함으로써 이 포스트의 title, description, date 등의 정보들을 정의할 수 있다. yaml 파일 형식에서 많이 사용하는 듯 하다. 나는 예전에 jekyll을 이용한 깃허브 블로그를 만들 때 front matter를 사용했던 기억이 떠올라 같은 방식을 선택했다.\n\n```markdown\n---\ntitle: \"블로그 만들기(1) - 마크다운 이 녀석\"\ndescription: \"개발 블로그에 기본이라고 할 수 있는 마크다운 파서와 Syntax highlight 삽질을 들여다보자\"\ndate: \"2022-06-19\"\n---\n```\n\n> 이 포스팅의 FrontMatter\n\n작업을 요약하자면\n\n1. 마크다운 파일을 불러와서\n2. front matter를 분리한 본문(body)를 획득했다.\n\n남은 작업은 아래의 3번 4번 정도인데..\n\n3. markdown을 html로 바꾸어 렌더하기\n4. syntax highlighting을 통해 고도화하기\n\nMarkdown 문법의 텍스트를 html로 바꾸어주는 라이브러리는 꽤나 많은데, 가장 유명하고 커뮤니티가 큰 라이브러리는 [unifiedjs](https://unifiedjs.com/) 이다. unified는 `remark`(마크다운) / `rehype`(HTML), `retext`(자연어) 등등을 지원하는데, 블로그 포스팅을 위해서는 remark와 rehype만 있으면 된다.\n추가적으로 Code Syntax를 하이라이팅 해주고 싶어서 `rehype-prism-plus` 라는 라이브러리도 추가했다.\n\n```ts\nimport rehypePrism from \"rehype-prism-plus\";\nimport rehypeStringify from \"rehype-stringify/lib\";\nimport { remark } from \"remark\";\nimport remarkParse from \"remark-parse\";\nimport remarkRehype from \"remark-rehype\";\n\nfunction MarkdownRenderer({ markdown }: { markdown: string }) {\n  const htmlText = remark()\n    .use(remarkParse)\n    .use(remarkRehype, { allowDangerousHtml: true })\n    .use(rehypeStringify, { allowDangerousHtml: true })\n    .use(rehypePrism)\n    .processSync(markdown)\n    .toString();\n\n  return <MarkdownRenderBlock dangerouslySetInnerHTML={{ __html: htmlText }} />;\n}\n\nconst MarkdownRenderBlock = styled.div`\n  line-height: 3rem;\n  blockquote {\n    box-shadow: ${createNeumorphismBoxShadow(1, 2, { inset: true })};\n    margin: 0;\n    padding: 5px;\n    border-left: 0.25em solid ${neumorphismTheme.secondary};\n    & > * {\n      margin: 0;\n    }\n  }\n\n  p > code {\n    box-shadow: ${createNeumorphismBoxShadow(1, 2, { inset: true })};\n    padding: 5px;\n    margin-left: 3px;\n    margin-right: 3px;\n  }\n\n  :not(pre) > code[class*=\"language-\"],\n  pre {\n    background: ${theme.palette.primary.light};\n    box-shadow: ${createNeumorphismBoxShadow(3, 5, { inset: true })};\n    border: none;\n    padding: 15px;\n  }\n\n  // 여기 아래부터 커스텀(prism-themes)\n  /**\n * VS theme by Andrew Lock (https://andrewlock.net)\n * Inspired by Visual Studio syntax coloring\n */\n\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    color: #393a34;\n    font-family: \"Consolas\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier,\n      monospace;\n    direction: ltr;\n    text-align: left;\n    white-space: pre;\n    word-spacing: normal;\n    word-break: normal;\n    font-size: 0.9em;\n    line-height: 1.2em;\n\n    -moz-tab-size: 4;\n    -o-tab-size: 4;\n    tab-size: 4;\n\n    -webkit-hyphens: none;\n    -moz-hyphens: none;\n    -ms-hyphens: none;\n    hyphens: none;\n  }\n\n  pre > code[class*=\"language-\"] {\n    font-size: 1em;\n  }\n\n  pre[class*=\"language-\"]::-moz-selection,\n  pre[class*=\"language-\"] ::-moz-selection,\n  code[class*=\"language-\"]::-moz-selection,\n  code[class*=\"language-\"] ::-moz-selection {\n    background: #c1def1;\n  }\n\n  pre[class*=\"language-\"]::selection,\n  pre[class*=\"language-\"] ::selection,\n  code[class*=\"language-\"]::selection,\n  code[class*=\"language-\"] ::selection {\n    background: #c1def1;\n  }\n\n  /* Code blocks */\n  pre[class*=\"language-\"] {\n    padding: 1em;\n    margin: 0.5em 0;\n    overflow: auto;\n    border: 1px solid #dddddd;\n    background: none;\n  }\n\n  /* Inline code */\n  :not(pre) > code[class*=\"language-\"] {\n    padding: 0.2em;\n    padding-top: 1px;\n    padding-bottom: 1px;\n    background: #f8f8f8;\n    border: 1px solid #dddddd;\n  }\n\n  .token.comment,\n  .token.prolog,\n  .token.doctype,\n  .token.cdata {\n    color: #008000;\n    font-style: italic;\n  }\n\n  .token.namespace {\n    opacity: 0.7;\n  }\n\n  .token.string {\n    color: #a31515;\n  }\n\n  .token.punctuation,\n  .token.operator {\n    color: #393a34; /* no highlight */\n  }\n\n  .token.url,\n  .token.symbol,\n  .token.number,\n  .token.boolean,\n  .token.variable,\n  .token.constant,\n  .token.inserted {\n    color: #36acaa;\n  }\n\n  .token.atrule,\n  .token.keyword,\n  .token.attr-value,\n  .language-autohotkey .token.selector,\n  .language-json .token.boolean,\n  .language-json .token.number,\n  code[class*=\"language-css\"] {\n    color: #0000ff;\n  }\n\n  .token.function {\n    color: #393a34;\n  }\n\n  .token.deleted,\n  .language-autohotkey .token.tag {\n    color: #9a050f;\n  }\n\n  .token.selector,\n  .language-autohotkey .token.keyword {\n    color: #00009f;\n  }\n\n  .token.important {\n    color: ${theme.palette.secondary.dark};\n  }\n\n  .token.important,\n  .token.bold {\n    font-weight: bold;\n  }\n\n  .token.italic {\n    font-style: italic;\n  }\n\n  .token.class-name,\n  .language-json .token.property {\n    color: #2b91af;\n  }\n\n  .token.tag,\n  .token.selector {\n    color: #800000;\n  }\n\n  .token.attr-name,\n  .token.property,\n  .token.regex,\n  .token.entity {\n    color: #ff0000;\n  }\n\n  .token.directive.tag .tag {\n    background: #ffff00;\n    color: #393a34;\n  }\n\n  /* overrides color-values for the Line Numbers plugin\n * http://prismjs.com/plugins/line-numbers/\n */\n  .line-numbers.line-numbers .line-numbers-rows {\n    border-right-color: #a5a5a5;\n  }\n\n  .line-numbers .line-numbers-rows > span:before {\n    color: #2b91af;\n  }\n\n  /* overrides color-values for the Line Highlight plugin\n* http://prismjs.com/plugins/line-highlight/\n*/\n  .line-highlight.line-highlight {\n    background: rgba(193, 222, 241, 0.2);\n    background: -webkit-linear-gradient(\n      left,\n      rgba(193, 222, 241, 0.2) 70%,\n      rgba(221, 222, 241, 0)\n    );\n    background: linear-gradient(\n      to right,\n      rgba(193, 222, 241, 0.2) 70%,\n      rgba(221, 222, 241, 0)\n    );\n  }\n`;\n```\n\n> 스타일은 조금씩 커스텀했다.\n\n만족스러운 디자인의 포맷을 만들어서 기분이 좋다.\n글을 열심히 써야겠다.\n"},"__N_SSG":true}